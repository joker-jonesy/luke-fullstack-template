generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id       Int       @id @default(autoincrement())
  username String    @unique
  password String
  posts    post[]
  admin    Boolean   @default(false)
  like     like[]
  comment  comment[]
  vote     vote[]
  image    String    @default("null")
}

model post {
  id        Int        @id @default(autoincrement())
  author    user?      @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId  Int?
  text      String
  post_tag  post_tag[]
  like      like[]
  createdAt DateTime   @default(now())
  comment   comment[]
}

model tag {
  id       Int        @id @default(autoincrement())
  name     String
  post_tag post_tag[]
}

model post_tag {
  id        Int  @id @default(autoincrement())
  post      post @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId    Int
  tag       tag  @relation(fields: [tagId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  tagId     Int
  commentId Int?
}

model like {
  id     Int    @id @default(autoincrement())
  post   post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId Int
  user   user?  @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId Int?
  type   String
}

model vote {
  id        Int     @id @default(autoincrement())
  comment   comment @relation(fields: [commentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  commentId Int
  user      user?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  userId    Int?
  type      String
}

model comment {
  id        Int      @id @default(autoincrement())
  author    user?    @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId  Int?
  post      post?    @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId    Int?
  text      String
  createdAt DateTime @default(now())
  vote      vote[]
}
